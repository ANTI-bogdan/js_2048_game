{"version":3,"sources":["modules/Game.class.js","scripts/main.js"],"names":["Game","initialState","initialBoard","board","JSON","parse","stringify","boardScore","currentStatus","isAbleToMove","isGameActive","isGameWon","isGameLost","moveTo","placeNewCell","randomRow","randomColumn","Math","floor","random","createCell","randomValue","direction","numCols","length","currentTable","addScore","transpose","table","map","_","colIndex","row","reverseRow","slice","reverse","moveTable","newTable","newRow","filter","num","zerosToAdd","i","Array","fill","zerosToAddEnd","makeMove","moveToSide","flat","includes","getStatus","GAME_FIELD","j","isGameOver","module","exports","require","game","container","document","querySelector","button","messageStart","messageLose","messageWin","scoreInfo","updateUI","gameState","getState","querySelectorAll","forEach","fieldCell","index","classList","classArray","className","remove","textContent","add","getScore","addEventListener","start","restart","keyboard","key","moveUp","moveDown","moveLeft","moveRight"],"mappings":"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","file":"main.01cbe57a.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialBoard = initialState;\n\n    this.board = JSON.parse(JSON.stringify(initialState));\n\n    this.boardScore = 0;\n\n    this.currentStatus = 'idle';\n\n    this.isAbleToMove = true;\n    this.isGameActive = false;\n    this.isGameWon = false;\n    this.isGameLost = false;\n  }\n\n  moveLeft() {\n    if (this.isGameActive) {\n      this.moveTo('left');\n    }\n  }\n  moveRight() {\n    if (this.isGameActive) {\n      this.moveTo('right');\n    }\n  }\n  moveUp() {\n    if (this.isGameActive) {\n      this.moveTo('up');\n    }\n  }\n  moveDown() {\n    if (this.isGameActive) {\n      this.moveTo('down');\n    }\n  }\n\n  getScore() {\n    return this.boardScore;\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getStatus() {\n    switch (true) {\n      case this.isGameWon:\n        this.currentStatus = 'win';\n        break;\n      case this.isGameLost:\n        this.currentStatus = 'lose';\n        break;\n      case this.isGameActive:\n        this.currentStatus = 'playing';\n        break;\n      default:\n        this.currentStatus = 'idle';\n        break;\n    }\n\n    return this.currentStatus;\n  }\n\n  start() {\n    this.board = JSON.parse(JSON.stringify(this.initialBoard));\n\n    this.isGameActive = true;\n    this.placeNewCell();\n    this.placeNewCell();\n  }\n\n  restart() {\n    this.board = JSON.parse(JSON.stringify(this.initialBoard));\n    this.boardScore = 0;\n\n    this.currentStatus = 'idle';\n    this.isGameActive = false;\n    this.isGameWon = false;\n    this.isGameLost = false;\n  }\n\n  placeNewCell() {\n    let randomRow, randomColumn;\n\n    do {\n      randomRow = Math.floor(Math.random() * 4);\n      randomColumn = Math.floor(Math.random() * 4);\n    } while (this.board[randomRow][randomColumn] !== 0);\n\n    this.board[randomRow][randomColumn] = this.createCell();\n  }\n\n  createCell() {\n    const randomValue = Math.random();\n\n    return randomValue < 0.1 ? 4 : 2;\n  }\n\n  moveTo(direction) {\n    if (!this.isGameActive) {\n      return;\n    }\n\n    const numCols = this.board[0].length;\n    let currentTable = JSON.parse(JSON.stringify(this.board));\n    let addScore = 0;\n\n    const transpose = (table) => {\n      return table[0].map((_, colIndex) => table.map((row) => row[colIndex]));\n    };\n\n    const reverseRow = (table) => {\n      return table.map((row) => row.slice().reverse());\n    };\n\n    const moveTable = (table) => {\n      const newTable = table.map((row) => {\n        let newRow = row.filter((num) => num !== 0);\n        const zerosToAdd = numCols - newRow.length;\n\n        newRow = [...Array(zerosToAdd).fill(0), ...newRow];\n\n        for (let i = newRow.length; i >= 0; i--) {\n          if (newRow[i - 1] === newRow[i]) {\n            newRow[i - 1] *= 2;\n            newRow[i] = 0;\n            addScore += newRow[i - 1];\n            i--;\n          }\n        }\n        newRow = newRow.filter((num) => num !== 0);\n\n        const zerosToAddEnd = numCols - newRow.length;\n\n        newRow = [...Array(zerosToAddEnd).fill(0), ...newRow];\n\n        return newRow;\n      });\n\n      return newTable;\n    };\n\n    const isGameOver = () => {\n      const GAME_FIELD = 4;\n\n      for (let i = 0; i < GAME_FIELD; i++) {\n        for (let j = 0; j < GAME_FIELD; j++) {\n          if (this.board[i][j] === 0) {\n            return false;\n          }\n        }\n      }\n\n      for (let i = 0; i < GAME_FIELD; i++) {\n        for (let j = 0; j < GAME_FIELD; j++) {\n          if (j < GAME_FIELD - 1 && this.board[i][j] === this.board[i][j + 1]) {\n            return false;\n          }\n\n          if (i < GAME_FIELD - 1 && this.board[i][j] === this.board[i + 1][j]) {\n            return false;\n          }\n        }\n      }\n\n      this.isGameActive = false;\n      this.isGameLost = true;\n\n      return true;\n    };\n\n    const makeMove = (moveToSide) => {\n      if (JSON.stringify(moveToSide) === JSON.stringify(currentTable)) {\n        return;\n      }\n\n      this.board = moveToSide;\n      currentTable = moveToSide;\n\n      if (this.board.flat().includes(2048)) {\n        this.isGameActive = false;\n        this.isGameWon = true;\n\n        this.getStatus();\n\n        return;\n      }\n\n      this.placeNewCell();\n\n      if (!isGameOver()) {\n        this.isAbleToMove = false;\n      }\n    };\n\n    switch (direction) {\n      case 'up':\n        const moveUp = transpose(\n          reverseRow(moveTable(reverseRow(transpose(currentTable)))),\n        );\n\n        makeMove(moveUp);\n\n        this.boardScore += addScore;\n        break;\n      case 'down':\n        const moveDown = transpose(moveTable(transpose(currentTable)));\n\n        makeMove(moveDown);\n\n        this.boardScore += addScore;\n        break;\n      case 'right':\n        const moveRight = moveTable(currentTable);\n\n        makeMove(moveRight);\n\n        this.boardScore += addScore;\n        break;\n      case 'left':\n        const moveLeft = reverseRow(moveTable(reverseRow(currentTable)));\n\n        makeMove(moveLeft);\n\n        this.boardScore += addScore;\n        break;\n    }\n  }\n}\n\nmodule.exports = Game;\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst container = document.querySelector('.container');\nconst button = container.querySelector('.button');\nconst messageStart = container.querySelector('.message-start');\nconst messageLose = container.querySelector('.message-lose');\nconst messageWin = container.querySelector('.message-win');\nconst scoreInfo = container.querySelector('.game-score');\n\nbutton.addEventListener('click', () => {\n  if (button.textContent === 'Start') {\n    game.start();\n\n    button.textContent = 'Restart';\n    button.classList.add('restart');\n    button.classList.remove('start');\n  } else {\n    game.restart();\n\n    button.textContent = 'Start';\n    button.classList.add('start');\n    button.classList.remove('restart');\n  }\n\n  messageStart.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n\n  updateUI();\n});\n\ndocument.addEventListener('keydown', (keyboard) => {\n  switch (keyboard.key) {\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    default:\n      break;\n  }\n\n  updateUI();\n});\n\nfunction updateUI() {\n  const gameState = game.getState().flat();\n  const fieldCells = container.querySelectorAll('.field-cell');\n\n  fieldCells.forEach((fieldCell, index) => {\n    const classList = fieldCell.classList;\n    const classArray = classList;\n\n    for (const className of classArray) {\n      if (className !== 'field-cell') {\n        classList.remove(className);\n        fieldCell.textContent = '';\n      }\n    }\n\n    if (gameState[index] !== 0) {\n      fieldCell.classList.add(`field-cell--${gameState[index]}`);\n      fieldCell.textContent = gameState[index];\n    }\n  });\n\n  scoreInfo.textContent = game.getScore();\n\n  if (game.getStatus() === 'lose') {\n    messageLose.classList.remove('hidden');\n  } else if (game.getStatus() === 'win') {\n    messageWin.classList.remove('hidden');\n  }\n}\n"]}